package util;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;

import com.sun.org.apache.xml.internal.security.exceptions.Base64DecodingException;
import com.sun.org.apache.xml.internal.security.utils.Base64;

import sun.misc.BASE64Encoder; 

public class GenerateSign {
	private final static String PRIVATE_KEY = "-----BEGIN PRIVATE KEY-----" + 
		""+ //insert your private key here
			"-----END PRIVATE KEY-----" + 
			"";

	public static void main(String[] args) throws InvalidKeyException, NoSuchAlgorithmException,
			InvalidKeySpecException, SignatureException, Base64DecodingException {

		try {

			URL url = new URL(""); //insert url here
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			conn.setDoOutput(true);
			conn.setRequestMethod("POST");
			conn.setRequestProperty("API_KEY", ""); //set key
			String digitalSign = getDigitalSignature();
			System.out.println(digitalSign);
			conn.setRequestProperty("DIGITAL_SIGNATURE", digitalSign);
			conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");

			if (conn.getResponseCode() != HttpURLConnection.HTTP_OK) {
				throw new RuntimeException("Failed : HTTP error code : " + conn.getResponseCode());
			}

			BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())));

			String output;
			System.out.println("Output from Server .... \n");
			while ((output = br.readLine()) != null) {
				System.out.println(output);
			}

			conn.disconnect();

		} catch (MalformedURLException e) {

			e.printStackTrace();

		} catch (IOException e) {

			e.printStackTrace();

		}

	}

	// get Digital Signature
	/**
	 * 
	 * @return
	 * @throws IOException
	 * @throws InvalidKeySpecException
	 * @throws NoSuchAlgorithmException
	 * @throws InvalidKeyException
	 * @throws SignatureException
	 * @throws Base64DecodingException
	 */
	public static String getDigitalSignature() throws NoSuchAlgorithmException, InvalidKeySpecException, IOException,
			InvalidKeyException, SignatureException, Base64DecodingException {
		String API_KEY = ""; //insert key
		PrivateKey privateKey = getPrivateKey();
		byte[] data = API_KEY.getBytes("UTF-8");
		Signature signature = Signature.getInstance("SHA512WithRSA");
		signature.initSign(privateKey);
		signature.update(data);
		byte[] signatureBytes = signature.sign();
//		String encodedSignature = new BASE64Encoder().encode(signatureBytes);
		String encodedSignature = java.util.Base64.getEncoder().encodeToString(signatureBytes);
		return encodedSignature;

	}

	private static PrivateKey getPrivateKey()
			throws NoSuchAlgorithmException, InvalidKeySpecException, IOException, Base64DecodingException {

		// Read in the key into a String
		StringBuilder pkcs8Lines = new StringBuilder();
		BufferedReader rdr = new BufferedReader(new StringReader(PRIVATE_KEY));
		String line;
		while ((line = rdr.readLine()) != null) {
			pkcs8Lines.append(line);
		}

		// Remove the "BEGIN" and "END" lines, as well as any whitespace

		String pkcs8Pem = pkcs8Lines.toString();
		pkcs8Pem = pkcs8Pem.replace("-----BEGIN PRIVATE KEY-----", "");
		pkcs8Pem = pkcs8Pem.replace("-----END PRIVATE KEY-----", "");
		pkcs8Pem = pkcs8Pem.replaceAll("\\s+", "");

		// Base64 decode the result

		byte[] pkcs8EncodedBytes = Base64.decode(pkcs8Pem);
		// extract the private key

		PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(pkcs8EncodedBytes);
		KeyFactory kf = KeyFactory.getInstance("RSA");
		PrivateKey privKey = kf.generatePrivate(keySpec);
		return privKey;
	}

}
